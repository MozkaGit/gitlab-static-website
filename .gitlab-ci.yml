image: docker:latest
services:
  - name: docker:dind
    alias: docker

stages:
  - Build image
  - Acceptance test
  - Release
  - Review
  - Stop review
  - Staging
  - Test staging
  - Production
  - Test production

build:
  stage: Build image
  script:
    - docker build -t static-website .
    - docker save static-website > static-website.tar
  artifacts:
    paths:
      - static-website.tar

test:
  stage: Acceptance test
  before_script:
    - apk add --no-cache --upgrade curl
  script:
    - docker load < static-website.tar
    - docker run -d -p 80:80 static-website
    - sleep 5
    - curl "http://docker" | grep "Dimension"
    - if [ $? -eq 0 ]; then echo "Acceptance test succeed"; fi

release:
  stage: Release
  before_script:
    - docker login registry.gitlab.com -u $USERNAME -p $TOKEN
  script:
    - docker load < static-website.tar
    - docker tag static-website $REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $REGISTRY:$CI_COMMIT_REF_NAME

review:
  stage: Review
  image: coxauto/aws-ebcli
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region us-east-1
    - eb init --region us-east-1 --platform Docker static-website_$CI_JOB_NAME
    - eb create review-env || echo "already exists."
    - eb status
  environment:
    name: review/$CI_COMMIT_REF_NAME
    on_stop: cleanup 
  only:
    - merge_requests

cleanup:
  stage: Stop review
  image: coxauto/aws-ebcli
  variables:
    GIT_STRATEGY: none
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region us-east-1
    - aws elasticbeanstalk terminate-environment --environment-name review-env
    - aws elasticbeanstalk delete-application --application-name static-website_$CI_JOB_NAME
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - merge_requests

staging:
  stage: Staging
  image: coxauto/aws-ebcli
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region us-east-1
    - eb init --region us-east-1 --platform Docker static-website_$CI_JOB_NAME
    - eb create staging-env || echo "already exists."
    - eb status
  after_script:
    - "echo $(eb status staging-env | grep CNAME: | awk '{print $2}') > staging-url.txt"
    - "export STAGING_URL=$(eb status staging-test-env | grep CNAME: | awk '{print $2}')"
  environment:
    name: staging/$CI_COMMIT_REF_NAME
    url: $STAGING_URL
  artifacts:
    paths:
      - staging-url.txt
  only:
    - master

test staging:
  stage: Test staging
  dependencies:
    - staging
  before_script:
    - apk add --no-cache --upgrade curl
  script:
    - curl $(cat staging-url.txt) | grep "Dimension"
    - if [ $? -eq 0 ]; then echo "Staging test succeed"; fi
  only:
    - master

production:
  stage: Production
  image: coxauto/aws-ebcli
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region us-east-1
    - eb init --region us-east-1 --platform Docker static-website_$CI_JOB_NAME
    - eb create production-env || echo "already exists."
    - eb status
  after_script:
    - "echo $(eb status production-env | grep CNAME: | awk '{print $2}') > production-url.txt"
    - "export PRODUCTION_URL=$(eb status staging-test-env | grep CNAME: | awk '{print $2}')"
  environment:
    name: production/$CI_COMMIT_REF_NAME
    url: $PRODUCTION_URL
  artifacts:
    paths:
      - production-url.txt
  only:
    - master

test production:
  stage: Test production
  dependencies:
    - production
  before_script:
    - apk add --no-cache --upgrade curl
  script:
    - curl $(cat production-url.txt) | grep "Dimension"
    - if [ $? -eq 0 ]; then echo "Staging test succeed"; fi
  only:
    - master